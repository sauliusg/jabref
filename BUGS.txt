-- After renaming the file 'Rename to a given name', JabRef-5.2
   triggers exception saying that it can not save the bibliography
   file, althout the file was saved OK (probably problems are with
   backup files).

-- Existing libraries that contain entries with a has symbol ('#') are
   written out incorrectly and can not be parsed after saving.

   New libraries incorrectly save entries with a hash ('#') symbols,
   and can not parse their own result when comma is present in the
   entry text.

-- Although the JabRef GUI does not allow multiple groups with the
   same name, such groups are not detected when present in the BibTeX
   file.

   Such groups can be created by hand, or (as in my case) they were
   inherited from the previous revisions of the database (when JabRef
   allowed creation of groups with identical names in different
   branches of the group tree).

   The behaviour of JabRef in such cases is not clear (will the entry
   be assigned to all such groups?), and fixing them required some
   less than trivial shell scripting...

-- Selecting another group looses highlight of the edited entry.

   When a group interface is used, switching a group interferes with
   the entry list highlight. When I click on the entry in the entry
   list, that entry is highlighted (displayed on a blue background as
   of current design), and the editor tabs are opened below. When I
   switch to a different group that does not contain the edited entry,
   the highlighted entry goes away. When I now refocus on the original
   group again, or on the "All entries" (super)group, the edited entry
   (which is still in the editing tabs!) is not highlighted, not
   brought into the display on the entry list, and is very difficult
   to find (there is not easy-to-find-way to automatically bring the
   edited entry into the list).

-- No way to configure JabRef so that it does *not* create backup
   files.

   There used to be a checkbox in configuration '[x] do not create
   backup files". By default backup file creation was activated, which
   if fine, but I always switch it off in most cases since I use
   version control for any important bibliography databases. Thus the
   backup files from being helpful would become an annoying clutter.

   Unfortunately, in recent JabRef versions (probably with some 4.0 or
   5.0 release) this configuration item was removed, and I now have to
   live with annoying "help" from the program that always leaves a
   *.bak file when the database is saved. This interferes with
   TAB-expansion on the command line, requires additional svn:ignore
   (or .gitignore) settings, and does not bring any useful function
   since all files are versioned anyway which is much more powerful
   than a *.bak file.

   While backup files might be a helpful time saver for some people
   (who do not use version control for their files), in the version
   control setup they are a nuisance and not a help. Would it be
   possible to bring this configuration item back as it used to be
   implemented?

-- Creating a group and dragging an entry there caused an "index out
   of bounds exception".

   The situation is shown in the "Screenshot from 2021-03-13
   21-25-38.png" screen snapshot. Unfortunately, it is impossible to
   reproduce so far...

-- The current groups interface is awkward.

   To make subgroups with identical names in several subgroups, I need
   to think out a unique name for them. The ad-hoc names are difficult
   to remember; after all, this is why we use a group tree in the
   first place â€“ to spare us remembering what group names are already
   present in another branch! Thus one of the obvious options is to
   prefix the group name with the full path, e.g.:

	sg/Computer Science/Algorithms
	sg/Bioinformatics/Algorithms

   and so on (sg/ is my user name prefix; we need this since the
   database is collaborative and shared by several users, and every
   user naturally wants to assign group names without being interfered
   or bothered by other users' assignments). I understand from the
   length discussions of the new group interface that this was this
   was the intended way to solve the group name uniqueness
   problem. Unfortunately, JabRef does not help to maintain this
   mechanism: when creating a new group, the hierarchy name is not
   suggested; all names are displayed in full, so names deeper in to
   the tree become very long, do not fit well into the allocated
   window area and contain a lot of repetitive prefixes (0 bits
   information) that obscure important text.

   New group entries are appended at the end of the current group list;
   extra sorting operation is need to bring entries into alphabetic
   order. And if different order needs to be maintained, there is no
   good support for that since the only supported operation is "sort
   all groups recursively...". Thus, maintaining a different sorting
   policy becomes next to impossible, and a separate sorting operation
   looses much of its sense.

   As a contrast, Zotero has a very simple and "intuitive"
   (i.e. working as is usually expected) tree interface to sort
   bibliographic records into groups; group names can be conveniently
   assigned at will, without bothering that they will clash with a
   name elsewhere in the tree. This particular function is very much
   missing in JabRef, and is indeed a big show stopper.

   Note that with the current implementation, groups essentially
   duplicate the function of keywords, adding additional quirk that
   each time I collapse a group my database file is changed (which I
   would rather not. A self-made hierarchical keywords can also be
   implemented without any support from JabRef itself (by adopting a
   personal agreement like 'user/Topic/Subtopic'). Thus it is not
   clear what benefits do groups as they are currently implemented
   bring to JabRef, and there are clearly functions that are badly
   missing (like a full-featured Zotero-like group tree mentioned
   above).

-- The file autolinking interface is confusing.

   The current autolinking mechanism is confusing; it presents
   automatically found files as if they were attached to the entry,
   although they are not, and often the suggested names are
   incorrect. The difference is only a small icon which one needs to
   distinguish carefully from other tiny signs (e.g. the down-left
   arrow which turns out to be "write XMP metadata").

   A much better interface was implemented before when files were only
   searched and suggested when a special button next to the field was
   pressed (like the "download" buttons now); the same should be for
   the XML metadata writer. Making these functions available as
   buttons would also make the GUI more consistent (since there are
   three buttons anyway).

   For mass operations, a special menu item should be available
   (probably the current "Search for unlinked local files" wold do the
   job, but I am not sure, never tried it). In any case, such function
   used to be in menus some versions ago...
